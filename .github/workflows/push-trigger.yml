name: admin-ui build upon a push

on:
  release:
    types: [published]
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      message:
        description: 'Message for manually triggering'
        required: false
        default: 'Triggered for Updates'
        type: string
  push:
    branches:
      - '!release-branch'
      - develop
      - release-*
      - master
      - 1.* 
      - MOSIP*
      - tf_nira_dev

jobs:
  build-admin-ui:
    uses: mosip/kattu/.github/workflows/npm-build.yml@develop
    with:
      SERVICE_LOCATION: ./admin-ui
      BUILD_ARTIFACT: admin-ui
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-docker-admin-ui:
    needs: build-admin-ui
    strategy:
      matrix:
        include:
          - SERVICE_LOCATION: './admin-ui'
            SERVICE_NAME: 'admin-ui'
            NPM_BUILD: true
            BUILD_ARTIFACT: 'admin-ui'
      fail-fast: false
    name: ${{ matrix.SERVICE_NAME }}
    uses: mosip/kattu/.github/workflows/docker-build.yml@master
    with:
      SERVICE_LOCATION: ${{ matrix.SERVICE_LOCATION }}
      SERVICE_NAME: ${{ matrix.SERVICE_NAME }}
      NPM_BUILD: ${{ matrix.NPM_BUILD }}
      BUILD_ARTIFACT: ${{ matrix.BUILD_ARTIFACT }}
      # Pass the commit metadata as build arguments
      COMMIT_HASH: ${{ github.sha }}
      COMMIT_ID: ${{ github.event.before }}
      BUILD_TIME: ${{ steps.timestamp.outputs.date }} # You can set this value using a separate timestamp step
    secrets:
      DEV_NAMESPACE_DOCKER_HUB: ${{ secrets.DEV_NAMESPACE_DOCKER_HUB }}
      ACTOR_DOCKER_HUB: ${{ secrets.ACTOR_DOCKER_HUB }}
      RELEASE_DOCKER_HUB: ${{ secrets.RELEASE_DOCKER_HUB }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  sonar-analysis:
    needs: build-admin-ui
    if: "${{ github.event_name != 'pull_request' }}"
    uses: mosip/kattu/.github/workflows/npm-sonar-analysis.yml@master
    with:
      SERVICE_LOCATION: admin-ui
      SONAR_URL: 'https://sonarcloud.io'
      PROJECT_KEY: 'mosip_${{ github.event.repository.name }}'
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      ORG_KEY: ${{ secrets.ORG_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-maven-admintest:
    uses: mosip/kattu/.github/workflows/maven-build.yml@master
    with:
      SERVICE_LOCATION: ./admintest
      BUILD_ARTIFACT: admintest
    secrets:
      OSSRH_USER: ${{ secrets.OSSRH_USER }}
      OSSRH_SECRET: ${{ secrets.OSSRH_SECRET }}
      OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      GPG_SECRET: ${{ secrets.GPG_SECRET }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-admintest-local:
    needs: build-maven-admintest
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: admintest
      SERVICE_LOCATION: admintest
      BUILD_ARTIFACT: admintest-local
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          ref: ${{ github.ref }}
          java-version: 11
          server-id: ossrh
          settings-path: ${{ github.workspace }}

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup the settings file for ossrh server
        run: |
          echo "<settings> <servers> <server> <id>ossrh</id> <username>${{secrets.ossrh_user}}</username> <password>${{secrets.ossrh_secret}}</password> </server> </servers> <profiles> <profile> <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation> <properties> <gpg.executable>gpg2</gpg.executable> <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase> </properties> </profile> </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml

      - name: Build residentuitests with Maven
        run: |
          cd ${{ env.SERVICE_LOCATION }}
          mvn -U -B package -Dmaven.wagon.http.retryHandler.count=2 --file pom.xml -s $GITHUB_WORKSPACE/settings.xml

      - name: Ready the springboot artifacts
        if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
        run: |
          find ${{ env.SERVICE_LOCATION }} -path '*/target/*' -name '*.jar'  -type f -exec zip ${{ env.BUILD_ARTIFACT }}.zip {} +

      - name: Upload the springboot jars
        if: ${{ !contains(github.ref, 'master') || !contains(github.ref, 'main') }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_ARTIFACT }}
          path: ${{ env.BUILD_ARTIFACT }}.zip

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,author,commit,workflow,job
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  build-docker-admintest:
    needs: build-admintest-local
    strategy:
      matrix:
        include:
          - SERVICE_LOCATION: 'admintest'
            SERVICE_NAME: 'admintest'
            BUILD_ARTIFACT: 'admintest-local'
      fail-fast: false
    name: ${{ matrix.SERVICE_NAME }}
    uses: mosip/kattu/.github/workflows/docker-build.yml@master
    with:
      SERVICE_LOCATION: ${{ matrix.SERVICE_LOCATION }}
      SERVICE_NAME: ${{ matrix.SERVICE_NAME }}
      BUILD_ARTIFACT: ${{ matrix.BUILD_ARTIFACT }}
    secrets:
      DEV_NAMESPACE_DOCKER_HUB: ${{ secrets.DEV_NAMESPACE_DOCKER_HUB }}
      ACTOR_DOCKER_HUB: ${{ secrets.ACTOR_DOCKER_HUB }}
      RELEASE_DOCKER_HUB: ${{ secrets.RELEASE_DOCKER_HUB }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  sonar-analysis-admintest:
    needs: build-admintest-local
    if: "${{  github.event_name != 'pull_request' }}"
    uses: mosip/kattu/.github/workflows/maven-sonar-analysis.yml@master
    with:
      SERVICE_LOCATION: admintest
      SONAR_URL: 'https://sonarcloud.io'
      PROJECT_KEY: 'mosip_admintest'
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      ORG_KEY: ${{ secrets.ORG_KEY }}
      OSSRH_USER: ${{ secrets.OSSRH_USER }}
      OSSRH_SECRET: ${{ secrets.OSSRH_SECRET }}
      OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      GPG_SECRET: ${{ secrets.GPG_SECRET }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
